package br.com.loteria.main;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Enumeration;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import java.util.zip.ZipFile;
import java.util.zip.ZipInputStream;

public class TesteDescompactarZip {
	private static final int TAMANHO_BUFFER = 2048; // 2 Kb

	public void extrairZip(File arquivoZip, File diretorio)
			throws ZipException, IOException {
		ZipFile zip = null;
		File arquivo = null;
		InputStream is = null;
		OutputStream os = null;
		byte[] buffer = new byte[TAMANHO_BUFFER];
		try {
			// cria diretório informado, caso não exista
			if (!diretorio.exists()) {
				diretorio.mkdirs();
			}
			if (!diretorio.exists() || !diretorio.isDirectory()) {
				throw new IOException("Informe um diretório válido");
			}
			zip = new ZipFile(arquivoZip);
			Enumeration e = zip.entries();
			while (e.hasMoreElements()) {
				ZipEntry entrada = (ZipEntry) e.nextElement();
				arquivo = new File(diretorio, entrada.getName());
				// se for diretório inexistente, cria a estrutura
				// e pula pra próxima entrada
				if (entrada.isDirectory() && !arquivo.exists()) {
					arquivo.mkdirs();
					continue;
				}
				// se a estrutura de diretórios não existe, cria
				if (!arquivo.getParentFile().exists()) {
					arquivo.getParentFile().mkdirs();
				}
				try {
					// lê o arquivo do zip e grava em disco
					is = zip.getInputStream(entrada);
					os = new FileOutputStream(arquivo);
					int bytesLidos = 0;
					if (is == null) {
						throw new ZipException("Erro ao ler a entrada do zip: "
								+ entrada.getName());
					}
					while ((bytesLidos = is.read(buffer)) > 0) {
						os.write(buffer, 0, bytesLidos);
					}
				} finally {
					if (is != null) {
						try {
							is.close();
						} catch (Exception ex) {
						}
					}
					if (os != null) {
						try {
							os.close();
						} catch (Exception ex) {
						}
					}
				}
			}
		} finally {
			if (zip != null) {
				try {
					zip.close();
				} catch (Exception e) {
				}
			}
		}
	}

	public static void main(String[] args) throws IOException {
		String nomeArquivo = "/tmp/D_lotfac.zip";
		ZipFile zip = new ZipFile(nomeArquivo);
		Enumeration arquivos = zip.entries();
		System.out.println("listando nome dos arquivos metodo 1");
		while (arquivos.hasMoreElements()) {
			ZipEntry arquivo = (ZipEntry) arquivos.nextElement();
			System.out.println(arquivo.getName());

		}
		zip.close();

		System.out.println("listando nome dos arquivos metodo 2");
		FileInputStream fis = new FileInputStream(nomeArquivo);
		ZipInputStream zis = new ZipInputStream(fis);
		ZipEntry entrada = null;
		while ((entrada = zis.getNextEntry()) != null) {
			System.out.println(entrada.getName());
		}
		zis.close();
		fis.close();

		System.out.println("extraindo arquivos");

	}

}
